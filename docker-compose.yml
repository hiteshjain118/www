services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: coralbricks-backend
    ports:
      - "3010:3010"
    env_file:
      - backend/.env
    environment:
      - PORT=3010
    volumes:
      - ./backend/logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3010/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - coralbricks-network

  chat-js:
    build:
      context: .
      dockerfile: chat_js/${CHAT_JS_DOCKERFILE:-Dockerfile}
    container_name: coralbricks-chat
    ports:
      - "3004:3004"
    env_file:
      - chat_js/.env
    volumes:
      - ./chat_js/logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3004/api/status', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - coralbricks-network
    depends_on:
      backend:
        condition: service_healthy

networks:
  coralbricks-network:
    driver: bridge

# Optional: Add volumes for persistent data
# volumes:
#   backend_logs:
#   chat_logs: 